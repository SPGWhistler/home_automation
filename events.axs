PROGRAM_NAME='events'

(***********************************************************)
(*                THE EVENTS GO BELOW                      *)
(***********************************************************)
DEFINE_EVENT (* Hardware Events Get processed here *)

(*
DATA_EVENT[dvSerialPort_1]
{
    ONLINE:	// When the device starts up - in this case it's just the serial port on the controller, not what is connected to it
    {
	SEND_COMMAND dvSerialPort_1, "'SET BAUD 19200,N,8,1'" //Sets the serial port communication
	SEND_STRING 0, "' *************  Serial Port 1 is online'" // outputs this text when veiwing "Diagnostics"
    }
    STRING:	// this fires when data comes through the serial port to the controller
    {
	strSystemName = DATA.TEXT // the string data will be placed in this varible
	// DATA.TEXT is an event varible local to the device that fired off the event
    }
    OFFLINE:
    {
	//Stuff that should happen if the device goes offline
    }
    ONERROR:
    {
	// errors my be triggered specific to the device
    }
}

DATA_EVENT[dvIP_Server]
{
    ONLINE:
    {
	SEND_STRING 0, "'IP Server - Client Connected'"
    }
    OFFLINE:
    {
	SEND_STRING 0, "'IP Server - Client Disconnected'"
    }
    STRING:
    {
	strIPServerData = DATA.TEXT
	SEND_STRING 0, "'Incoming string from IP Client:'"
	SEND_STRING 0, "'"',strIPServerData,'"'"
	// you'd likely pass the info to a parseing function from here
	SEND_STRING dvIP_Server, "'ACK!'" // send an acknowledgement ? 
    }
    ONERROR:
    {
	SEND_STRING 0, "'IP Server is already closed!'"
    }
}


DATA_EVENT[dvIP_Client]
{
    ONLINE:
    {
	SEND_STRING 0, "'IP Connection to ',IPDevice.strIP_Device_Name"
	SEND_STRING 0, "'at IP address: ',IPDevice.strIP_Address,' opened'"
(* "WAIT" is a useful way to delay commands, but have many limitations *)
(* no local vars can be used in a wait command block *)
(* the wait stack is proccessed outside of the main stack and is not very timing accurate *)
	WAIT 10 // Wait 10 x 1/10 seconds or 1 second 
	{
	    (* Send the string *)
	    SEND_STRING dvIP_Client, "IPDevice.strDataToSend"
	    (* Close the port *)
	    //IP_CLIENT_CLOSE(IPDevice.intLocal_Port_Number)
	}
    }
    OFFLINE:
    {
	SEND_STRING 0, "'IP Connection to ',IPDevice.strIP_Device_Name"
	SEND_STRING 0, "'at IP address: ',IPDevice.strIP_Address,' closed'"
	(* Clear the data *)
	IPDevice.strDataToSend = ""
    }
    ONERROR:
    {
	IPDevice.lngIP_Error = DATA.NUMBER
	SEND_STRING 0, "'IP Comm Error! Error number = ',ITOA(IPDevice.lngIP_Error)"
    }
    STRING:{
	SEND_STRING 0,"'string: client=',Data.Text"
    }


}
*)
BUTTON_EVENT[dvTP_Main,BUTTON_GARAGE_DOOR]
{
    PUSH:
    {
	PULSE[dvRelaysS2,1]
    }
}
BUTTON_EVENT[dvTP_Garage,BUTTON_GARAGE_DOOR]
{
    PUSH:
    {
	PULSE[dvRelaysS2,1]
    }
}

BUTTON_EVENT[dvTP_Main,BUTTON_PLAY]
{
    PUSH:
    {
	http_get('http://192.168.1.246:3000/play')
    }
}
BUTTON_EVENT[dvTP_Main,BUTTON_PREV]
{
    PUSH:
    {
	http_get('http://192.168.1.246:3000/prev')
    }
}
BUTTON_EVENT[dvTP_Main,BUTTON_NEXT]
{
    PUSH:
    {
	http_get('http://192.168.1.246:3000/next')
    }
}
(*
BUTTON_EVENT[dvTP_Main,BUTTON_POWER] // Button events are generated by buttons on a TP
{
    PUSH:
    {
	IF (intSystemPower != TRUE)
	{
	    fnSystemPower(TRUE) //turn the system on 
	    SEND_STRING 0, 'turn system on'
	}
	ELSE
	{
	    fnSystemPower(FALSE)	// turn the system off
	    SEND_STRING 0, 'turn system off'
	}
    }
    HOLD[20]: 
    {
	//Execute if the button is pushed for a certain time in tenths of a second (2 seconds in this example)    }
    }
    RELEASE:
    {
	// do stuff when the button is released
    }
}
*)
// Garage Door Closed Sensor
CHANNEL_EVENT[dvIOPortsS2,1] // Stuff that happens when Input 1 is activated
{
    ON:
    {
	// Run this when the channel is off
	SEND_STRING 0, "'Garage Door is CLosed!'"
	ON[dvTP_Main,12]
	ON[dvTP_Garage,12]
	//ON[vdv_DataChannels,VIRTUAL_CHANNEL_1] // puts this virtual device channel in an on state
    }
    OFF:
    {
	//Run this when the channel is on
	SEND_STRING 0, "'Garage Door is Open!'"
	OFF[dvTP_Main,12]
	OFF[dvTP_Garage,12]
	//OFF[vdv_DataChannels,VIRTUAL_CHANNEL_1] // puts this virtual device channel in an off state
    }
}
// Garage Door Light
CHANNEL_EVENT[dvIOPortsS2,4]
{
    ON:
    {
	SEND_STRING 0, "'Garage Door light is ON!'"
	ON[dvTP_Main,13]
	ON[dvTP_Garage,13]
    }
    OFF:
    {
	SEND_STRING 0, "'Garage Door light is OFF!'"
	OFF[dvTP_Main,13]
	OFF[dvTP_Garage,13]
    }
}
// Garage Door Motor
CHANNEL_EVENT[dvIOPortsS2,5]
{
    ON:
    {
	SEND_STRING 0, "'Garage Door motor is RUNNING!'"
	ON[dvTP_Main,14]
	ON[dvTP_Garage,14]
    }
    OFF:
    {
	SEND_STRING 0, "'Garage Door motor is OFF!'"
	OFF[dvTP_Main,14]
	OFF[dvTP_Garage,14]
    }
}

(*
CHANNEL_EVENT[vdv_DataChannels,VIRTUAL_CHANNEL_1] //Stuff that happens when this channel changes state
{
    ON:
    {
	// Run this when the channel is on
    }
    OFF:
    {
	// Run this when the channel is off
    }
}

CHANNEL_EVENT[vdv_DataChannels,VIRTUAL_CHANNELS] // use an array to address many channels 
{
    ON:
    {
	LOCAL_VAR INTEGER intChannelNumber
	intChannelNumber = CHANNEL.CHANNEL // find out the channel that triggered the event
	SEND_STRING 0, "'Channel #', ITOA(intChannelNumber), ' has been turned on!'"
    }	// "ITOA" is a function to convert an Integer to an Ascii String
	// "ATOI" does the opposite 
    OFF:
    {
	LOCAL_VAR INTEGER intChannelNumber
	intChannelNumber = CHANNEL.CHANNEL // find out the channel that triggered the event
	SEND_STRING 0, "'Channel #', ITOA(intChannelNumber), ' has been turned off!'"
    }
}

LEVEL_EVENT[vdv_TPs,TP_LEVEL_3] //Stuff that happens when this level changes state
{
    intY_Coordinate = LEVEL.VALUE
    // LEVEL.VALUE is the value of the data that triggered the LEVEL_EVENT
}
TIMELINE_EVENT[SAMPLE_TIMELINE_ID]
{
    SWITCH(TIMELINE.SEQUENCE)
    {
        CASE 1: // 1 second
        {
            // code to run on first tick
        }
        CASE 2: // 5 seconds
        {
            // code to run on second tick
        }
        CASE 3: // 10 seconds
        {
            // code to run on second tick
        }
    }
}
*)